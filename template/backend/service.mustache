import ResultWrapper = require('../ResultWrapper')
import RequestResult = require("../RequestResult")
import RequestListResult = require("../RequestListResult")
import BaseModel = require('../BaseModel')
import Sequelize = require('sequelize')
import dao = require('../../database/dao/index')
import utils = require('../../utils/index')
{{#refs}}
import {{{.}}} = require('../model/{{{.}}}')
{{/refs}}
//code1
{{{code1}}}
//code1

/**
 * {{{doc}}}
 */
class {{name}} {
    app: FeathersApp
    sequelize: any

    get path(): string {
        return '{{{path}}}'
    }

    get isUpload(): boolean {
        return {{{isUpload}}}
    }

    setup(app: FeathersApp, path: string) {
        this.app = app;
        this.sequelize = this.app.get('sequelizeClient')
        console.log('setup service: /' + path)
    }

    {{#isGET}}
    //GET
    find(requestInfo: FeathersRequestInfo) {
        return this.doWork(requestInfo.query, requestInfo)
    }
    {{/isGET}}
    {{^isGET}}
    //POST
    create(data: any, requestInfo: FeathersRequestInfo) {
        return this.doWork(data, requestInfo)
    }
    {{/isGET}}

    async doWork(params: any, requestInfo: FeathersRequestInfo): Promise<any> {
        {{#isList}}
        let page = parseInt(params.page || 1)
        let page_size = parseInt(params.page_size || RequestListResult.PAGE_SIZE, 10)
        {{/isList}}
        {{#parameters}}
        /**{{{description}}}*/
        let {{name}}: {{type}} = params.{{name}} || {{{defaultValue}}}
        {{/parameters}}

        let data = new {{dataType}}()
        let result = ResultWrapper.wrap{{#isList}}List{{/isList}}({{#isList}}[data]{{/isList}}{{^isList}}data{{/isList}})
        {{#isList}}
        result.page = page
        result.page_size = page_size
        {{/isList}}
        result.message = '假数据'

//code2
{{{code2}}}
//code2

        return result
    }
}

export = {{name}}
