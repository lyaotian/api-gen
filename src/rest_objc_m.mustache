//
//  KWMAPIManager.m
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!!DO NOT EDIT!!! Auto generated code !!!DO NOT EDIT!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//  Copyright (c) 2015 kollway. All rights reserved.
//

#import "KWMAPIManager.h"
#import <ACS/ACS.h>
#import "KWMStringUtil.h"
#import "KWMRequestResult.h"
#import "KWMRequestListResult.h"
#import "KWMUserDao.h"
#import "KWMBaseModel.h"

#import "KWMAddress.h"
#import "KWMAdvertise.h"
#import "KWMBalldate.h"
#import "KWMBaseModel.h"
#import "KWMCity.h"
#import "KWMMatch.h"
#import "KWMMatchSchedule.h"
#import "KWMPhone.h"
#import "KWMPush.h"
#import "KWMRanking.h"
#import "KWMTeam.h"
#import "KWMUser.h"

typedef NS_ENUM(NSInteger, KWMHTTPMethod) {
    KWMHTTPMethodGET = 0,
    KWMHTTPMethodPOST,
    KWMHTTPMethodPUT,
    KWMHTTPMethodDELETE
};


@implementation KWMAPIManager

+ (KWMAPIManager *)sharedManager {
    static KWMAPIManager *_sharedManager = nil;
    static dispatch_once_t oncePredicate;
    dispatch_once(&oncePredicate, ^{
        _sharedManager = [[self alloc] init];
    });
    return _sharedManager;
}

- (NSString *)toAbsoluteUrl:(NSString *)relativeUrl {
    if([KWMStringUtil isEmpty:relativeUrl]){
        return self.baseUrl;
    }
    if([relativeUrl rangeOfString:@"http"].location == 0){
        return relativeUrl;
    }
    return [[NSString alloc] initWithFormat:@"%@%@", self.baseUrl, relativeUrl];
}

- (NSString *)baseUrl {
    if(! _baseUrl){
        if (API_HOST_PORT != 80) {
            _baseUrl = [[NSString alloc] initWithFormat:@"http://%@:%d", API_HOST, API_HOST_PORT];
        }else{
            _baseUrl = [[NSString alloc] initWithFormat:@"http://%@", API_HOST];
        }
    }
    return _baseUrl;
}

/**
 * 根据API返回类型，模型类型创建成功callback
 */
- (void(^)(NSURLSessionDataTask *, id ))buildSuccessCallbackWithResultClass:(Class)requestResultClass
                                                                 modelClass:(Class)modelClass
                                                                    success:(void (^)(NSURLSessionDataTask *task, id responseObject))success
                                                                    failure:(void (^)(NSURLSessionDataTask *task, NSError *error))failure{
    void(^successCallback)(NSURLSessionDataTask *, id ) =
    ^(NSURLSessionDataTask *task, id jsonDict){
        NSError *error;
        id result = nil;
        @try {
#ifdef DEBUG
            NSData *jsonData = [NSJSONSerialization dataWithJSONObject:jsonDict options:NSJSONWritingPrettyPrinted error:&error];
            NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
            NSLog(@"%@", jsonString);
#endif
            result = [[requestResultClass alloc] initWithDictionary:jsonDict modelClass:modelClass error:&error];
        }
        @catch (NSException *e){
            NSLog(@"%@", [e description]);
        }
        @finally{
            [[KWMAPIConnect shared] listen:result];
            if(error){
                failure(task, error);
            }else{
                success(task, result);
            }

            [self checkRequestResult:result];
        }
    };
    return successCallback;
}

/**
 * 处理列表API的请求参数
 */
- (NSDictionary *)processListAPIParameters:(NSDictionary *)parameters {
    static NSString *KEY_PAGE = @"page";
    static NSString *KEY_PAGE_SIZE = @"pagesize";
    NSMutableDictionary *mutableParameters = [[NSMutableDictionary alloc] initWithDictionary:parameters];

    NSAssert((mutableParameters && mutableParameters[KEY_PAGE]), @"required parameter: page");

    if(!mutableParameters[KEY_PAGE_SIZE]){
        mutableParameters[KEY_PAGE_SIZE] = @(KWM_PAGE_SIZE).stringValue;
    }

    return [[NSDictionary alloc] initWithDictionary:mutableParameters];
}

/**
 * 检测API返回错误号
 */
- (void)checkRequestResult:(id)requestResult {
    if(! requestResult) {
        return;
    }

    NSInteger responseCode = 0;
    if([requestResult isKindOfClass:[KWMRequestResult class]]){
        responseCode = ((KWMRequestResult *)requestResult).code;
    }else if([requestResult isKindOfClass:[KWMRequestListResult class]]){
        responseCode = ((KWMRequestListResult *)requestResult).code;
    }else{
        return;
    }

    switch (responseCode){
        case 1: {
            [[KWMUserDao shareDao] logout];
            [[NSNotificationCenter defaultCenter] postNotificationName:@"KWMReceiverNoLogin" object:requestResult];
            break;
        }
        default:break;
    }
}


- (AFHTTPSessionManager *)buildSessionManager{
    return [self buildSessionManager:NO];
}

- (AFHTTPSessionManager *)buildSessionManager:(BOOL)isJsonParameter{

    NSURL *url = [NSURL URLWithString:self.baseUrl];
    AFHTTPSessionManager *sessionManager = [[AFHTTPSessionManager alloc] initWithBaseURL:url];

    if (isJsonParameter) {
        sessionManager.requestSerializer = [AFJSONRequestSerializer serializerWithWritingOptions:0];
    }

    [[KWMUserDao shareDao] checkSession];
    sessionManager.requestSerializer.HTTPShouldHandleCookies = YES;

    sessionManager.responseSerializer = [AFJSONResponseSerializer serializerWithReadingOptions:NSJSONReadingAllowFragments];
    return sessionManager;
}

- (NSURLSessionDataTask *)startSessionTask:(KWMHTTPMethod)httpMethod
                                   apiPath:(NSString *)apiPath
                                parameters:(NSDictionary *)parameters
                                 filePaths:(NSDictionary *)filePaths
                             jsonParameter:(BOOL)isJsonParameter
                                    result:(Class)result
                                     model:(Class)model
                                   success:(void (^)(NSURLSessionDataTask *task, id result))success
                                   failure:(void (^)(NSURLSessionDataTask *task, NSError *error))failure {

    NSAssert((result == [KWMRequestResult class] || result == [KWMRequestListResult class]),
             @"result class must either be KWMRequestResult or KWMRequestListResult!");
    NSAssert((!model || (model && [model isSubclassOfClass:[JSONModel class]])),
             @"model class must be sub class of JSONModel");

    void(^successCallback)(NSURLSessionDataTask *, id ) = [self buildSuccessCallbackWithResultClass:result
                                                                                         modelClass:model
                                                                                            success:success
                                                                                            failure:failure];
    AFHTTPSessionManager *sessionManager = [self buildSessionManager:isJsonParameter];

    //app version code
    static NSString *KEY_VERSION_CODE = @"version_code";
    NSString *build = [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleVersion"];
    NSMutableDictionary *mutableParameters = [[NSMutableDictionary alloc] initWithDictionary:parameters];
    mutableParameters[KEY_VERSION_CODE] = build;

    if (filePaths != nil && filePaths.count > 0) {
        return [sessionManager POST:apiPath parameters:mutableParameters constructingBodyWithBlock:^(id<AFMultipartFormData> formData) {

            NSFileManager *fileManager = [NSFileManager defaultManager];

            NSEnumerator *e = [filePaths keyEnumerator];
            for (NSString *key in e) {
                NSString *filePath = filePaths[key];

                if (![KWMStringUtil isEmpty:filePath]
                    && [fileManager fileExistsAtPath:filePath]) {

                    [formData appendPartWithFileURL:[NSURL fileURLWithPath:filePath]
                                               name:key
                                              error:nil];
                }
            }
        } success:successCallback failure:failure];
    }

    switch (httpMethod) {
        case KWMHTTPMethodGET:{
            return [sessionManager GET:apiPath parameters:mutableParameters success:successCallback failure:failure];
        }
        case KWMHTTPMethodPOST:{
            return [sessionManager POST:apiPath parameters:mutableParameters success:successCallback failure:failure];
        }
        case KWMHTTPMethodPUT:{
            return [sessionManager PUT:apiPath parameters:mutableParameters success:successCallback failure:failure];
        }
        case KWMHTTPMethodDELETE:{
            return [sessionManager DELETE:apiPath parameters:mutableParameters success:successCallback failure:failure];
        }
        default:{
            NSString *reason = [[NSString alloc] initWithFormat:@"Don't use this way to build your NSURLSessionDataTask!"];
            NSAssert(NO, reason);
            return nil;
        }
    }

}

- (NSURLSessionDataTask *)startSessionTask:(KWMHTTPMethod)httpMethod
                                   apiPath:(NSString *)apiPath
                                parameters:(NSDictionary *)parameters
                                    result:(Class)result
                                     model:(Class)model
                                   success:(void (^)(NSURLSessionDataTask *task, id result))success
                                   failure:(void (^)(NSURLSessionDataTask *task, NSError *error))failure {
    return [self startSessionTask:httpMethod
                   apiPath:apiPath
                parameters:parameters
                 filePaths:nil
             jsonParameter:NO
                    result:result
                     model:model
                   success:success failure:failure];
}

- (NSString *)getSMSAPIToken:(NSString *)phone {
    return [KWMStringUtil MD5:[NSString stringWithFormat:@"www.orangebusiness.com.cn+%@", phone]];
}

- (NSString *)toIds:(NSArray<__kindof NSString *> *)idsArray {
    NSMutableString *tmp = [NSMutableString new];
    for (NSString *s in idsArray) {
        [tmp appendFormat:@"%@,", s];
    }

    if (tmp.length > 0) {
        return [tmp substringToIndex:tmp.length - 1];
    }else{
        return @"";
    }
}

@end
